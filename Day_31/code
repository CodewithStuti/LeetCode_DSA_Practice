/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* replaceValueInTree(TreeNode* root) {
        if (!root) return nullptr;

        queue<TreeNode*> q;
        q.push(root);
        root->val = 0; // Root node has no cousins, so set it to 0.
        
        while (!q.empty()) {
            int levelSize = q.size();
            int totalSum = 0;
            
            vector<pair<TreeNode*, TreeNode*>> currentLevel; // To store nodes and their parents
            
            // Step 1: Traverse the current level and compute the total sum of all node values.
            for (int i = 0; i < levelSize; ++i) {
                TreeNode* node = q.front();
                q.pop();
                currentLevel.push_back({node, nullptr});
                
                // Add children to the queue and note their parent-child relationship.
                if (node->left) {
                    q.push(node->left);
                    currentLevel.back().second = node; // Note the parent of this child node.
                    totalSum += node->left->val;
                }
                if (node->right) {
                    q.push(node->right);
                    currentLevel.back().second = node; // Note the parent of this child node.
                    totalSum += node->right->val;
                }
            }

            // Step 2: Update each node's value based on its cousins.
            for (auto& p : currentLevel) {
                TreeNode* node = p.first;
                TreeNode* parent = p.second;
                int siblingSum = 0;

                if (parent) {
                    if (parent->left) siblingSum += parent->left->val;
                    if (parent->right) siblingSum += parent->right->val;
                }
                
                // The node's new value is the total sum minus its sibling sum.
                if (node->left) node->left->val = totalSum - siblingSum;
                if (node->right) node->right->val = totalSum - siblingSum;
            }
        }
        
        return root;
    }

    // Utility function to print the tree (level-order)
    void printTree(TreeNode* root) {
        if (!root) return;
        queue<TreeNode*> q;
        q.push(root);
        while (!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            if (node) {
                cout << node->val << " ";
                q.push(node->left);
                q.push(node->right);
            }
        }
    }
};

