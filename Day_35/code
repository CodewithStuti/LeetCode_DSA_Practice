class Solution {
public:
   int maximalSquare(vector<vector<char>>& matrix) {
    // Get matrix dimensions
    int m = matrix.size();    // Number of rows
    int n = matrix[0].size(); // Number of columns
    
    // DP table to store the side length of largest square ending at (i, j)
    vector<vector<int>> dp(m, vector<int>(n, 0));
    int maxSide = 0;  // Stores the side length of the largest square found
    
    // Traverse through each cell in the matrix
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (matrix[i][j] == '1') {  // We only process '1' cells
                if (i == 0 || j == 0) {
                    // If we're in the first row or first column, the largest square is 1x1 if cell is '1'
                    dp[i][j] = 1;
                } else {
                    // Calculate the minimum side length we can extend for square at (i, j)
                    dp[i][j] = min({dp[i-1][j], dp[i][j-1], dp[i-1][j-1]}) + 1;
                }
                // Update the maximum side length found so far
                maxSide = max(maxSide, dp[i][j]);
            }
        }
    }
    
    // The area of the largest square is side^2
    return maxSide * maxSide;
}
};
