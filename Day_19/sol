class Solution {
public:
int maxWidthRamp(vector<int>& nums) {
    // Stack to store indices where the values in the array are in decreasing order
    stack<int> s;
    
    // Step 1: Populate the stack with indices in decreasing order
    for (int i = 0; i < nums.size(); ++i) {
        // If the stack is empty or the current number is less than the number at the top of the stack,
        // push the index onto the stack. This ensures that the values in the stack are in decreasing order.
        if (s.empty() || nums[s.top()] > nums[i]) {
            s.push(i);
        }
    }

    // Variable to store the maximum width of the ramp
    int max_width = 0;

    // Step 2: Traverse from the end of the array to the beginning
    for (int j = nums.size() - 1; j >= 0; --j) {
        // For each element, check if there is a number in the stack that is smaller or equal
        // This would mean we have found a ramp
        while (!s.empty() && nums[s.top()] <= nums[j]) {
            // Calculate the width of the ramp: j - i
            max_width = max(max_width, j - s.top());
            // Pop the index because we've found a ramp using this index, so we don't need it anymore
            s.pop();
        }
    }

    // Return the maximum width of the ramp found
    return max_width;
}
};
