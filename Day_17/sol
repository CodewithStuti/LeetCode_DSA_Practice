class Solution {
public:
int minSwaps(string s) {
    int balance = 0;  // Track the balance of brackets
    int swaps = 0;    // Count the number of swaps needed
    int maxUnbalance = 0;  // Track the maximum unbalance

    // Traverse through the string to find the maximum unbalance
    for (char c : s) {
        if (c == '[') {
            balance++;  // Opening bracket increases balance
        } else {
            balance--;  // Closing bracket decreases balance
        }

        // Track the most unbalanced state (where balance is most negative)
        maxUnbalance = min(maxUnbalance, balance);
    }

    // The maxUnbalance tells us how many swaps are needed.
    // We take the absolute value of maxUnbalance and divide by 2
    // because each swap fixes 2 unbalanced brackets.
    swaps = (-maxUnbalance + 1) / 2;

    return swaps;
    }
};
