class Solution {
public:
    bool parseBoolExpr(string expression) {
        stack<char> stk;  // Stack to hold characters during evaluation.

        // Traverse each character of the expression.
        for (char c : expression) {
            if (c == ')') {
                // Temporary stack to collect the inner expression inside parentheses
                stack<char> temp;
                
                // Collect everything inside the parentheses into temp
                while (stk.top() != '(') {
                    temp.push(stk.top());
                    stk.pop();
                }
                stk.pop();  // Remove the '(' from stack.

                // The operator preceding '(' (either &, |, or !) will now be at the top of the stack.
                char operatorChar = stk.top();
                stk.pop();  // Remove operator from stack.

                // Boolean variable to store the result
                bool result;
                
                // Evaluate the expression based on the operator
                if (operatorChar == '&') {
                    result = true;  // For AND operation, start with true
                    // Process each value in temp (which contains 't' or 'f')
                    while (!temp.empty()) {
                        char tempChar = temp.top();
                        temp.pop();
                        if (tempChar == 'f') {
                            result = false;  // AND short-circuits to false if any value is false
                        }
                    }
                } else if (operatorChar == '|') {
                    result = false;  // For OR operation, start with false
                    // Process each value in temp (which contains 't' or 'f')
                    while (!temp.empty()) {
                        char tempChar = temp.top();
                        temp.pop();
                        if (tempChar == 't') {
                            result = true;  // OR short-circuits to true if any value is true
                        }
                    }
                } else if (operatorChar == '!') {
                    // NOT operator, we expect only one value inside
                    char tempChar = temp.top();
                    temp.pop();
                    result = (tempChar == 'f');  // NOT flips the value
                }

                // Push the result of the expression back to the stack as 't' or 'f'.
                stk.push(result ? 't' : 'f');
            } else if (c != ',' && c != ' ') {
                // Push non-comma and non-space characters to stack (such as 't', 'f', '!', '&', '|', '(').
                stk.push(c);
            }
        }

        // The final result should be at the top of the stack.
        return stk.top() == 't';
    }
};
