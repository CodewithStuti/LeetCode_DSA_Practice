class Solution {
public:
  //Functions to invert a character ('0' becomes '1', and '1' becomes '0')
char invert(char c) {
    return (c == '0') ? '1' : '0';
}

// Recursive function to find the kth bit in Sn
char findKthBit(int n, int k) {
    // Base case: If n is 1, Sn is just "0", so return the first bit which is '0'
    if (n == 1) return '0';

    // Length of Sn is 2^n - 1
    int length = (1 << n) - 1;

    // Midpoint of Sn (the middle bit is where "1" is added)
    int mid = length / 2 + 1;

    // If k is the midpoint, the result is '1'
    if (k == mid) return '1';

    // If k is less than the midpoint, it's in the left half, so look in Sn-1
    if (k < mid) return findKthBit(n - 1, k);

    // If k is greater than the midpoint, it's in the right half,
    // which is the reverse and inverted part of Sn-1
    return invert(findKthBit(n - 1, length - k + 1));
  }
};
