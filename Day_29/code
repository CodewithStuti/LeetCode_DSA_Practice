class Solution {
public:
 // Helper function to recursively calculate the maximum number of unique substrings
int maxUniqueSplitHelper(const string &s, int start, unordered_set<string> &seen) {
    // If we've reached the end of the string, no more substrings can be made
    if (start == s.length()) {
        return 0;
    }
    
    int maxCount = 0;
    
    // Iterate through all possible substrings starting from 'start'
    for (int end = start + 1; end <= s.length(); ++end) {
        // Extract the substring from 'start' to 'end-1'
        string current = s.substr(start, end - start);
        
        // Only proceed if this substring hasn't been seen before
        if (seen.find(current) == seen.end()) {
            seen.insert(current);  // Mark this substring as seen
            // Recursively call the function for the next part of the string and add 1 to the count
            maxCount = max(maxCount, 1 + maxUniqueSplitHelper(s, end, seen));
            seen.erase(current);  // Backtrack by removing the substring from the set
        }
    }
    
    return maxCount;
}

// Function to calculate the maximum number of unique substrings
int maxUniqueSplit(string s) {
    unordered_set<string> seen;  // To keep track of unique substrings
    return maxUniqueSplitHelper(s, 0, seen);  // Start recursive function from index 0
}
};
